service: lambda-s3-api-gateway

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-south-1
  apiName: ${self:service}
  memorySize: 128 #mb
  timeout: 10 #seconds
  environment:
    BUCKET_NAME: ${self:custom.bucketName}

plugins:
  - serverless-iam-roles-per-function

custom:
  bucketName: s3-bucket-${self:provider.stage}

functions:
  uploadFileToS3Bucket:
    handler: src/upload.handler
    name: upload-file-to-s3-bucket
    events:
      - http:
          path: file
          method: POST
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:Put*"
        Resource: arn:aws:s3:::${self:custom.bucketName}/*

  getFileFromS3Bucket:
    handler: s3c/get.handler
    name: get-file-from-s3-bucket
    events:
      - http:
          path: file/${fileKey}
          method: GET
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:Get*"
        Resource: arn:aws:s3:::${self:custom.bucketName}/*

  deleteFileFromS3Bucket:
    handler: src/delete.handler
    name: delete-file-from-s3-bucket
    events:
      - http:
          path: file/${fileKey}
          method: DELETE
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:DeleteObject" # "s3:Delete*" will include 's3:DeleteBucket' so be more specific and only allow deleting s3 bucket objects rather than the whole bucket
        Resource: arn:aws:s3:::${self:custom.bucketName}/*

resources:
  Resources:
    FileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: Private